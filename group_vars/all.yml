---
# =============================================================================
# KUBERNETES CLUSTER CONFIGURATION
# =============================================================================
# Central configuration file for Kubernetes cluster deployment
# This file contains all customizable variables for the deployment
# Modify values according to your environment requirements

# -----------------------------------------------------------------------------
# DOMAIN AND NETWORK CONFIGURATION
# -----------------------------------------------------------------------------
# Main domain name for the cluster and services
# Used for DNS resolution, ingress, and service discovery
main_domain: onboarding1.com

# =============================================================================
# HIGH AVAILABILITY (HA) CONFIGURATION
# =============================================================================
# Kubernetes 클러스터 고가용성 설정
# 단일 마스터 vs 다중 마스터 모드 제어

# -----------------------------------------------------------------------------
# HA 모드 설정
# -----------------------------------------------------------------------------
# true: kube-vip를 사용한 다중 마스터 HA 모드
# false: 단일 마스터 모드 (기본값)
ha_mode: false

# kube-vip 설정 (HA 모드에서만 사용)
# VIP(Virtual IP)를 통한 API 서버 로드밸런싱
kubevip_enabled: "{{ ha_mode | default(false) | bool }}"
kubevip_interface: "eth0"                    # 네트워크 인터페이스 (환경에 맞게 변경)
kubevip_address: "{{ wildcard_ip }}"         # VIP 주소 (wildcard_ip 재사용)
kubevip_image: "ghcr.io/kube-vip/kube-vip:v0.6.4"  # kube-vip 이미지 버전

# 마스터 노드 토큰 관리
# 마스터 노드 추가 시 토큰 자동 재생성 설정
token_auto_regenerate: true                  # 토큰 자동 재생성 활성화
token_ttl: "24h"                            # 토큰 유효 시간 (24시간)

# =============================================================================
# OS-SPECIFIC PACKAGE CONFIGURATION
# =============================================================================
# Centralized package management for Ubuntu/Debian and CentOS/RHEL systems
# All OS-specific packages are managed here for easy customization
# 
# ARCHITECTURE:
# - Packages are organized by functionality (kubernetes, container, system, etc.)
# - Each package category has ubuntu and centos sections
# - Optional package groups can be enabled/disabled with install_* flags
#
# USAGE GUIDE:
# 1. ADD PACKAGES: Add package names to appropriate OS lists
#    Example: Add 'nginx' to both ubuntu and centos system_packages
# 2. REMOVE PACKAGES: Comment out or remove from lists
#    Example: # - unnecessary-package
# 3. CONTROL COMPONENTS: Use install_* flags to enable/disable entire groups
#    Example: install_dev_tools: false (disables all development packages)
# 4. OS-SPECIFIC PACKAGES: Handle different package names per OS
#    Example: nfs-common (Ubuntu) vs nfs-utils (CentOS)
#
# EXAMPLES:
# - Add monitoring: system_packages -> ubuntu/centos -> add 'htop', 'iotop'
# - Enable development: install_dev_tools: true
# - Add web server: system_packages -> ubuntu/centos -> add 'nginx'
# - Different package names: already handled (nfs-common vs nfs-utils)
#
# MODIFY THESE LISTS ACCORDING TO YOUR ENVIRONMENT NEEDS

# -----------------------------------------------------------------------------
# CORE KUBERNETES PACKAGES (REQUIRED)
# -----------------------------------------------------------------------------
# Essential Kubernetes components - DO NOT MODIFY unless changing K8s version
# These packages are required for cluster operation on all nodes
kubernetes_packages:
  ubuntu:
    - kubelet          # Kubernetes node agent
    - kubeadm          # Kubernetes cluster bootstrapping tool
    - kubectl          # Kubernetes command-line tool
  centos:
    - kubelet          # Kubernetes node agent  
    - kubeadm          # Kubernetes cluster bootstrapping tool
    - kubectl          # Kubernetes command-line tool

# -----------------------------------------------------------------------------
# CONTAINER RUNTIME PACKAGES
# -----------------------------------------------------------------------------
# Containerd, buildkit, and nerdctl packages for container runtime
# Containerd is the primary container runtime for Kubernetes
container_packages:
  ubuntu:
    - containerd.io    # Container runtime (used by Kubernetes)
    - runc             # OCI container runtime
    - buildkit         # Advanced container image building
    - nerdctl          # Docker-compatible CLI for containerd
  centos:
    - containerd.io    # Container runtime (used by Kubernetes)
    - runc             # OCI container runtime
    - buildkit         # Advanced container image building
    - nerdctl          # Docker-compatible CLI for containerd

# -----------------------------------------------------------------------------  
# SYSTEM UTILITIES AND TOOLS
# -----------------------------------------------------------------------------
# Common system utilities and command-line tools
# Customize this list based on your operational requirements
system_packages:
  ubuntu:
    - bash-completion  # Command-line auto-completion
    - jq              # JSON processor for scripts
    - openssh-server  # SSH server for remote access
    - net-tools       # Network utilities (netstat, ifconfig)
    - ca-certificates # SSL/TLS certificate authorities
    - tree            # Directory tree display utility
    - curl            # HTTP client for testing and scripts
    - wget            # File download utility
    - vim             # Text editor
  centos:
    - bash-completion  # Command-line auto-completion
    - jq              # JSON processor for scripts  
    - openssh-server  # SSH server for remote access
    - net-tools       # Network utilities (netstat, ifconfig)
    - tree            # Directory tree display utility
    - curl            # HTTP client for testing and scripts
    - wget            # File download utility
    - vim             # Text editor

# -----------------------------------------------------------------------------
# NETWORK AND STORAGE PACKAGES (CONDITIONAL)
# -----------------------------------------------------------------------------
# Network services and shared storage packages
# Controlled by install_network_storage flag - disable if not needed
network_storage_packages:
  ubuntu:
    - nfs-common       # NFS client utilities
    - nfs-kernel-server # NFS server (for shared storage)
    - dnsmasq         # Lightweight DNS/DHCP server
  centos:
    - nfs-utils       # NFS client/server utilities (different name on CentOS)
    - dnsmasq         # Lightweight DNS/DHCP server

# -----------------------------------------------------------------------------
# TIME SYNCHRONIZATION PACKAGES (CONDITIONAL)
# -----------------------------------------------------------------------------  
# Network time synchronization with chrony
# Controlled by install_time_sync flag - essential for cluster stability
time_sync_packages:
  ubuntu:
    - chrony          # Time synchronization daemon
  centos:
    - chrony          # Time synchronization daemon (chronyd service)

# -----------------------------------------------------------------------------
# DEVELOPMENT TOOLS (OPTIONAL)
# -----------------------------------------------------------------------------
# Development and build tools for compilation and debugging
# Controlled by install_dev_tools flag - disable in production for security
dev_tools_packages:
  ubuntu:
    - git             # Version control system
    - build-essential # Build tools (gcc, make, etc.)
    - python3-pip     # Python package installer
  centos:
    - git             # Version control system
    - gcc             # GNU C compiler
    - gcc-c++         # GNU C++ compiler  
    - make            # Build automation tool
    - python3-pip     # Python package installer

# -----------------------------------------------------------------------------
# PACKAGE INSTALLATION CONTROL FLAGS
# -----------------------------------------------------------------------------
# Fine-grained control over which package groups to install
# Set to false to skip installation of optional components
install_dev_tools: false          # Development tools (git, compilers, pip)
install_network_storage: true     # NFS and network storage support
install_time_sync: true           # Chrony time synchronization (recommended)

# =============================================================================
# DOCKER REGISTRY CONFIGURATION  
# =============================================================================
# Private Docker registry settings for offline installations and custom images

# -----------------------------------------------------------------------------
# DOCKER REGISTRY SERVER
# -----------------------------------------------------------------------------
# Private registry for storing Kubernetes and application images
# Used for air-gapped installations or custom image repositories
docker_registry_ip: "192.168.0.21"
registry_port: 5000                          # Docker registry port
registry_version: "2"                      # Docker registry API version
registry_data_dir: "/opt/docker-registry"  # Registry data storage directory
registry_name: "registry"                  # Registry container name

# =============================================================================
# SYSTEM CONFIGURATION
# =============================================================================

# -----------------------------------------------------------------------------
# TIMEZONE AND TIME SYNCHRONIZATION
# -----------------------------------------------------------------------------
# System timezone and NTP configuration for cluster time synchronization
# Critical for certificate validation and cluster coordination
set_timezone: Asia/Seoul              # System timezone (change as needed)
ntp_client_network: 192.168.0.0/24   # Network allowed to sync time

# Chrony NTP Configuration
# Support for both external NTP servers and internal cluster time sync
use_external_ntp: true                # Use external NTP servers (false for airgapped)
external_ntp_servers:                 # External NTP servers (when use_external_ntp: true)
  - "time.google.com"
  - "pool.ntp.org"
  - "time.cloudflare.com"

# Internal cluster time synchronization (for airgapped environments)
chrony_master_server: "192.168.0.21" # Master node as NTP server (when use_external_ntp: false)
chrony_allow_networks:                # Networks allowed to sync from master
  - "192.168.0.0/24"
  - "10.0.0.0/8"
  - "172.16.0.0/12"

# -----------------------------------------------------------------------------
# KUBERNETES CLUSTER CONFIGURATION
# -----------------------------------------------------------------------------
# Core Kubernetes cluster settings - modify carefully
# These settings affect cluster networking and DNS resolution
kubernetes_version: '1.23.17'        # Kubernetes version to install
dns_domain: cluster.local            # Internal DNS domain for services
service_subnet: 10.96.0.0/12        # IP range for Kubernetes services
pod_subnet: 10.244.0.0/16           # IP range for pod networking (Flannel default)

# -----------------------------------------------------------------------------
# DNS CONFIGURATION
# -----------------------------------------------------------------------------
# DNS settings for cluster name resolution and external connectivity
# Supports wildcard DNS for ingress and service access
wildcard_ip: "192.168.0.30"         # IP for wildcard DNS entries (*.domain.com)
main_nameserver: "192.168.0.21"     # Primary DNS server (usually master node)
enable_forwarding: true             # Enable DNS forwarding to upstream servers
forward_servers:                    # Upstream DNS servers for external resolution
  - "168.126.63.1"                  # KT DNS server (Korea) - change for your region
  - "168.126.63.2"                  # KT DNS server (Korea) - change for your region
enable_wildcard: true               # Enable wildcard DNS entries

# -----------------------------------------------------------------------------
# PACKAGE REPOSITORIES
# -----------------------------------------------------------------------------
# Local package repository URLs for offline or custom package sources
# Useful for air-gapped environments or faster local package access
repo_url:
  centos: "http://192.168.0.21:8080/repo"      # CentOS package repository
  ubuntu: "http://192.168.0.101:8080/repo/"    # Ubuntu package repository

# -----------------------------------------------------------------------------
# CONTAINERD CONFIGURATION
# -----------------------------------------------------------------------------
# Containerd daemon configuration and registry settings
# Controls containerd behavior and registry access
containerd_log_max_size: "2000m"   # Maximum size for container logs

# Container registry authentication
registry_username: "admin"         # Registry username for authentication
registry_password: "Mak1nar0cks!"  # Registry password for authentication
registry_server: "cr.makina.rocks" # Registry server for authentication

# Buildkit configuration
buildkit_enabled: true             # Enable buildkit for advanced builds
buildkit_insecure_registries:      # Insecure registries for buildkit
  - "harbor.{{ main_domain }}"      # Local Harbor registry
  - "cr.makina.rocks"               # Custom registry

# Airgapped environment settings
airgapped_mode: false              # Enable airgapped mode (no internet access)
local_binary_path: "/opt/k8s-bins" # Local path for storing binaries in airgapped mode

# Offline package sources (for airgapped environments)
offline_packages:
  containerd_version: "1.7.8"      # Containerd version for offline installation
  runc_version: "1.1.9"            # Runc version for offline installation
  buildkit_version: "0.12.3"       # Buildkit version for offline installation
  nerdctl_version: "1.7.0"         # Nerdctl version for offline installation
  crictl_version: "1.28.0"         # Crictl version for offline installation