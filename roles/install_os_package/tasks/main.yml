---
# Cross-platform package installation
- name: Update package cache (Debian/Ubuntu)
  apt:
    update_cache: yes
    cache_valid_time: 3600
    update_cache_retries: 5
    update_cache_retry_max_delay: 30
  when: ansible_os_family == "Debian"
  register: apt_cache_result
  retries: 5
  delay: 30
  until: apt_cache_result is succeeded
  throttle: "{{ parallel_execution.package_installation }}"

- name: Install packages on Debian/Ubuntu
  apt:
    name: "{{ ubuntu_packages }}"
    state: present
  when: ansible_os_family == "Debian"
  register: apt_install_result
  retries: 5
  delay: 30
  until: apt_install_result is succeeded
  throttle: "{{ parallel_execution.package_installation }}"

- name: Install packages on RHEL/CentOS
  package:
    name: "{{ rhel_packages }}"
    state: present
  when: ansible_os_family == "RedHat"
  register: yum_install_result
  retries: 3
  delay: 10
  until: yum_install_result is succeeded

- name: Install distribution-specific packages
  package:
    name: "{{ package_map[item][ansible_os_family] }}"
    state: present
  loop:
    - nfs_client
    - time_sync
  when: package_map[item][ansible_os_family] is defined
  ignore_errors: true

- block:
    - name: Check for NVIDIA devices
      shell: lspci | grep -i NVIDIA
      register: nvidia_devices
      ignore_errors: true
      tags: installer

    - name: Install NVIDIA container toolkit and driver
      yum:
        name:
          - kernel-devel-5.14.0-427.18.1.el9_4
          - kernel-5.14.0-427.18.1.el9_4
          - kernel-tools-5.14.0-427.18.1.el9_4
        state: present
      when: nvidia_devices.stdout != ""

    - name: Create disable-nouveau.conf file
      copy:
        dest: /etc/modprobe.d/disable-nouveau.conf
        content: |
          blacklist nouveau
          options nouveau modeset=0
      when: nvidia_devices.stdout != ""

    - name: Regenerate initramfs
      command: dracut --force
      when: nvidia_devices.stdout != ""

    - name: Reboot NVIDIA devices only
      reboot:
        reboot_timeout: 1200
      when: nvidia_devices.stdout != ""
      become: yes

    - name: Download NVIDIA driver tarball
      ansible.builtin.command:
        cmd: wget -O /tmp/nvidia-driver_535.161.tar.gz {{ repo_url.centos }}nvidia-driver_535.161.tar.gz
      args:
        creates: /tmp/nvidia-driver_535.161.tar.gz
      when: nvidia_devices.stdout != ""

    - name: Extract NVIDIA driver tarball
      ansible.builtin.unarchive:
        src: /tmp/nvidia-driver_535.161.tar.gz
        dest: /tmp/
        remote_src: yes
      when: nvidia_devices.stdout != ""

    - name: Download NVIDIA installer
      ansible.builtin.command:
        cmd: wget -O /tmp/NVIDIA-Linux-x86_64-{{ driver_version }}.run {{ repo_url.centos }}{{ driver_version }}/NVIDIA-Linux-x86_64-{{ driver_version }}.run
      args:
        creates: /tmp/NVIDIA-Linux-x86_64-{{ driver_version }}.run
      when: nvidia_devices.stdout != ""

    - name: Extract NVIDIA installer
      ansible.builtin.shell:
        cmd: sh NVIDIA-Linux-x86_64-{{ driver_version }}.run -x
      args:
        chdir: /tmp
      when: nvidia_devices.stdout != ""

    - name: Run NVIDIA installer
      ansible.builtin.shell: |
        cd /tmp/NVIDIA-Linux-x86_64-{{ driver_version }} &&
        ./nvidia-installer --silent \
                           --install-compat32-libs \
                           --no-nouveau-check \
                           --no-nvidia-modprobe \
                           --no-rpms \
                           --no-backup \
                           --no-check-for-alternate-installs \
                           --no-libglx-indirect \
                           --no-install-libglvnd \
                           --x-prefix=/tmp/null \
                           --x-module-path=/tmp/null \
                           --x-library-path=/tmp/null \
                           --x-sysconfig-path=/tmp/null
      when: nvidia_devices.stdout != ""
      tags: installer

    - name: Reboot NVIDIA devices only
      reboot:
        reboot_timeout: 1200
      when: nvidia_devices.stdout != ""
      become: yes

    - name: Ensure the symbolic link /sbin/ldconfig points to /sbin/ldconfig.real
      ansible.builtin.file:
        src: /sbin/ldconfig
        dest: /sbin/ldconfig.real
        state: link
      tags: ldconfig
  when: ansible_os_family == "RedHat"