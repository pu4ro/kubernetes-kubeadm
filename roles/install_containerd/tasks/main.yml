---
# Phase 1: Install containerd package
- name: Install containerd package (Ubuntu/Debian)
  apt:
    name: containerd
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"
  register: containerd_install_ubuntu

- name: Install containerd package (RHEL/CentOS)
  yum:
    name: containerd
    state: present
  when: ansible_os_family == "RedHat"
  register: containerd_install_rhel

# RHEL-specific systemd service limits configuration
- name: Ensure LimitNPROC is set to 100000 (RHEL/CentOS only)
  lineinfile:
    path: /usr/lib/systemd/system/containerd.service
    regexp: '^LimitNPROC='
    line: 'LimitNPROC=100000'
    state: present
    insertafter: '^\[Service\]'
  when: ansible_os_family == "RedHat"

- name: Ensure LimitNOFILE is set to 100000 (RHEL/CentOS only)
  lineinfile:
    path: /usr/lib/systemd/system/containerd.service
    regexp: '^LimitNOFILE='
    line: 'LimitNOFILE=100000'
    state: present
    insertafter: '^\[Service\]'
  when: ansible_os_family == "RedHat"

- name: Create containerd configuration directory
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Generate containerd default configuration
  command: containerd config default
  register: containerd_config
  changed_when: false

- name: Write containerd configuration
  copy:
    content: "{{ containerd_config.stdout }}"
    dest: /etc/containerd/config.toml
    backup: yes
  notify: restart containerd

- name: Enable systemd cgroup in containerd
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  notify: restart containerd

- name: Configure insecure registries in containerd
  blockinfile:
    path: /etc/containerd/config.toml
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Insecure registries"
    insertafter: '^\[plugins."io.containerd.grpc.v1.cri".registry.configs\]'
    block: |
      {% for registry in insecure_registries | default([]) %}
      [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry }}".tls]
        insecure_skip_verify = true
      [plugins."io.containerd.grpc.v1.cri".registry.configs."{{ registry }}".auth]
        username = ""
        password = ""
      {% endfor %}
    state: present
  when: insecure_registries is defined and insecure_registries is not none and insecure_registries | length > 0
  notify: restart containerd

- name: Configure registry mirrors in containerd
  blockinfile:
    path: /etc/containerd/config.toml
    marker: "# {mark} ANSIBLE MANAGED BLOCK - Registry mirrors"
    insertafter: '^\[plugins."io.containerd.grpc.v1.cri".registry.mirrors\]'
    block: |
      {% for registry in insecure_registries | default([]) %}
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."{{ registry }}"]
        endpoint = ["http://{{ registry }}"]
      {% endfor %}
    state: present
  when: insecure_registries is defined and insecure_registries is not none and insecure_registries | length > 0
  notify: restart containerd

- name: Reload systemd daemon (RHEL/CentOS after service file changes)
  systemd:
    daemon_reload: yes
  when: ansible_os_family == "RedHat"

- name: Start and enable containerd service
  systemd:
    name: containerd
    state: started
    enabled: yes

- name: Set CONTAINERD_NAMESPACE environment variable globally
  lineinfile:
    path: /etc/environment
    regexp: '^CONTAINERD_NAMESPACE='
    line: 'CONTAINERD_NAMESPACE=k8s.io'
    state: present
    create: yes

- name: Set CONTAINERD_NAMESPACE for current session
  lineinfile:
    path: /etc/profile.d/containerd.sh
    line: 'export CONTAINERD_NAMESPACE=k8s.io'
    state: present
    create: yes
    mode: '0644'

- name: Set CONTAINERD_NAMESPACE in bashrc for root user
  lineinfile:
    path: /root/.bashrc
    regexp: '^export CONTAINERD_NAMESPACE='
    line: 'export CONTAINERD_NAMESPACE=k8s.io'
    state: present

- name: Wait for containerd to be ready
  wait_for:
    timeout: 30
  delegate_to: localhost

# Phase 2: Install nerdctl package (after containerd is ready)
- name: Install nerdctl package (Ubuntu/Debian)
  apt:
    name: nerdctl
    state: present
  when: 
    - ansible_os_family == "Debian"
    - containerd_install_ubuntu is succeeded
  register: nerdctl_install_ubuntu

- name: Install nerdctl package (RHEL/CentOS)
  yum:
    name: nerdctl
    state: present
  when: 
    - ansible_os_family == "RedHat"
    - containerd_install_rhel is succeeded
  register: nerdctl_install_rhel

- name: Verify nerdctl installation
  command: nerdctl --version
  register: nerdctl_version_check
  changed_when: false
  when: (nerdctl_install_ubuntu is succeeded) or (nerdctl_install_rhel is succeeded)

# Phase 3: Install buildkit package (after nerdctl is ready)
- name: Install buildkit package (Ubuntu/Debian)
  apt:
    name: buildkit
    state: present
  when: 
    - ansible_os_family == "Debian"
    - nerdctl_version_check is succeeded
  register: buildkit_install_ubuntu

- name: Install buildkit package (RHEL/CentOS)
  yum:
    name: buildkit
    state: present
  when: 
    - ansible_os_family == "RedHat"
    - nerdctl_version_check is succeeded
  register: buildkit_install_rhel

- name: Create buildkit configuration directory
  file:
    path: /etc/buildkit
    state: directory
    mode: '0755'
  when: (buildkit_install_ubuntu is succeeded) or (buildkit_install_rhel is succeeded)

- name: Create buildkitd configuration
  copy:
    dest: /etc/buildkit/buildkitd.toml
    content: |
      [worker.oci]
        enabled = false
      [worker.containerd]
        enabled = true
        namespace = "k8s.io"
    owner: root
    group: root
    mode: '0644'
  when: (buildkit_install_ubuntu is succeeded) or (buildkit_install_rhel is succeeded)

- name: Start and enable buildkit service
  systemd:
    name: buildkit
    state: started
    enabled: yes
  when: (buildkit_install_ubuntu is succeeded) or (buildkit_install_rhel is succeeded)

# Final verification
- name: Test containerd functionality
  command: nerdctl images
  register: containerd_test
  changed_when: false
  failed_when: false

- name: Display installation status
  debug:
    msg: |
      Installation completed:
      - containerd: {{ 'INSTALLED' if (containerd_install_ubuntu is succeeded) or (containerd_install_rhel is succeeded) else 'FAILED' }}
      - nerdctl: {{ 'INSTALLED' if nerdctl_version_check is succeeded else 'FAILED' }}
      - buildkit: {{ 'INSTALLED' if (buildkit_install_ubuntu is succeeded) or (buildkit_install_rhel is succeeded) else 'FAILED' }}
      - Test: {{ 'PASSED' if containerd_test.rc == 0 else 'FAILED' }}