---
- name: Download containerd tarball
  get_url:
    url: "{{ repo_url.centos }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    dest: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"

- name: Extract containerd tarball
  ansible.builtin.unarchive:
    src: "/tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
    dest: /usr/local
    remote_src: yes

- name: Download containerd systemd service file
  get_url:
    url: "{{ repo_url.centos }}/containerd.service"
    dest: "/tmp/containerd.service"

- name: Install containerd systemd service file
  ansible.builtin.copy:
    src: "/tmp/containerd.service"
    dest: /usr/lib/systemd/system/containerd.service
    owner: root
    group: root
    mode: '0644'
    remote_src: yes  

- name: Create containerd configuration directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Generate default containerd configuration
  command: containerd config default
  register: containerd_config

- name: Write default containerd configuration to file
  copy:
    content: "{{ containerd_config.stdout }}"
    dest: /etc/containerd/config.toml

- name: Ensure LimitNPROC is set to 100000
  lineinfile:
    path: /usr/lib/systemd/system/containerd.service
    regexp: '^LimitNPROC='
    line: 'LimitNPROC=100000'
    state: present
    insertafter: '^\[Service\]'

- name: Ensure LimitNOFILE is set to 100000
  lineinfile:
    path: /usr/lib/systemd/system/containerd.service
    regexp: '^LimitNOFILE='
    line: 'LimitNOFILE=100000'
    state: present
    insertafter: '^\[Service\]'

#- name: Check for NVIDIA GPU
#  shell: lspci | grep -i nvidia
#  register: nvidia_gpu
#  ignore_errors: yes

#- name: Add NVIDIA runtime configuration to containerd
#  template:
#    src: containerd_nvidia.j2
#    dest: /etc/containerd/config.toml
#    backup: yes
#  when: nvidia_gpu.rc == 0

- name: Replace sandbox_image value
  replace:
    path: /etc/containerd/config.toml
    regexp: 'sandbox_image\s*=\s*"registry.k8s.io/pause:3.8"'
    replace: 'sandbox_image = "cr.makina.rocks/external-hub/kubernetes/pause:3.9"'
  become: yes

- name: Enable systemd cgroup in containerd configuration
  ansible.builtin.replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Add HTTP registry configuration
  blockinfile:
    path: /etc/containerd/config.toml
    insertbefore: '^\\[plugins."io.containerd.grpc.v1.cri".registry.mirrors\\]'
    block: |
      [plugins."io.containerd.grpc.v1.cri".registry.mirrors."cr.makina.rocks"]
        endpoint = ["http://cr.makina.rocks"]

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Enable and start containerd service
  ansible.builtin.systemd:
    name: containerd.service
    enabled: yes
    state: started

- name: Restart containerd service
  ansible.builtin.systemd:
    name: containerd.service
    state: restarted

- name: Set version and architecture variables
  set_fact:
    version: "1.1.9"
    arch: "amd64"

- name: Download runc binary
  get_url:
    url: "{{ repo_url.centos }}/runc.{{ arch }}"
    dest: "/tmp/runc.{{ arch }}"
    mode: '0755'
    
- name: Install runc binary
  command: sudo install -o root -g root -m 0755 /tmp/runc.{{ arch }} /usr/local/sbin/runc
  args:
    removes: "/tmp/runc.{{ arch }}"

- name: Set version for CNI plugins
  set_fact:
    VERSION: "1.3.0"
    
- name: Download CNI plugins
  get_url:
    url: "{{ repo_url.centos }}cni-plugins-linux-{{ arch }}-v{{ VERSION }}.tgz"
    dest: "/tmp/cni-plugins-linux-{{ arch }}-v{{ VERSION }}.tgz"
    
- name: Create directory for CNI plugins
  file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'
    
- name: Extract CNI plugins
  unarchive:
    src: "/tmp/cni-plugins-linux-{{ arch }}-v{{ VERSION }}.tgz"
    dest: /opt/cni/bin
    remote_src: yes
    
- name: Restart containerd service
  systemd:
    name: containerd
    state: restarted

- name: Set version for nerdctl and buildkit
  set_fact:
    VERSION: "1.6.0"
    
- name: Download nerdctl
  get_url:
    url: "{{ repo_url.centos }}nerdctl-{{ VERSION }}-linux-{{ arch }}.tar.gz"
    dest: "/tmp/nerdctl-{{ VERSION }}-linux-{{ arch }}.tar.gz"
    
- name: Extract nerdctl
  unarchive:
    src: "/tmp/nerdctl-{{ VERSION }}-linux-{{ arch }}.tar.gz"
    dest: /usr/local/bin
    remote_src: yes

- name: Set version for nerdctl and buildkit
  set_fact:
    VERSION: "0.12.2"

- name: Download buildkit
  get_url:
    url: "{{ repo_url.centos }}buildkit-v{{ VERSION }}.linux-{{ arch }}.tar.gz"
    dest: "/tmp/buildkit-v{{ VERSION }}.linux-{{ arch }}.tar.gz"
    
- name: Extract buildkit
  unarchive:
    src: "/tmp/buildkit-v{{ VERSION }}.linux-{{ arch }}.tar.gz"
    dest: /usr/local
    remote_src: yes
    
- name: Download buildkit service file
  get_url:
    url: "{{ repo_url.centos }}buildkit.service"
    dest: "/tmp/buildkit.service"
    
- name: Install buildkit service file
  copy:
    src: /tmp/buildkit.service
    dest: /usr/lib/systemd/system/buildkit.service
    owner: root
    group: root
    mode: '0644'
    remote_src: yes

- name: Download buildkit socket file
  get_url:
    url: "{{ repo_url.centos }}buildkit.socket"
    dest: "/tmp/buildkit.socket"
  tags: buildkit
    
- name: Install buildkit socket file
  copy:
    src: /tmp/buildkit.socket
    dest: /usr/lib/systemd/system/buildkit.socket
    owner: root
    group: root
    mode: '0644'
    remote_src: yes
  tags: buildkit
    
- name: Create buildkit configuration directory
  file:
    path: /etc/buildkit
    state: directory
    mode: '0755'
    
- name: Create buildkitd.toml
  copy:
    dest: /etc/buildkit/buildkitd.toml
    content: |
      [worker.oci]
        enabled = false
      [worker.containerd]
        enabled = true
        namespace = "k8s.io"
    owner: root
    group: root
    mode: '0644'
    
- name: Reload systemd daemon
  systemd:
    daemon_reload: yes
    
- name: Enable and start buildkit service
  systemd:
    name: buildkit
    enabled: yes
    state: restarted