- name: Initialize the Kubernetes master
  block:
    - name: Start kubelet service
      service:
        name: kubelet
        state: started
        enabled: yes
      
    - name: Check if any Kubernetes nodes are already set up
      command: kubectl get nodes
      register: kubectl_nodes
      ignore_errors: true

    - name: Template kubeadm config file
      template:
        src: kubeadm-init.yaml.j2
        dest: /root/kubeadm-init.yml

    - name: Create /etc/kubernetes/manifests directory
      file:
        path: /etc/kubernetes/manifests
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Template kube-vip manifest file
      template:
        src: kube-vip.yaml.j2
        dest: /etc/kubernetes/manifests/kube-vip.yaml
      when: inventory_hostname in groups['masters'] and master_ha and kube_vip_address is defined

    - name: Initialize Kubernetes cluster with kubeadm (single master)
      command: kubeadm init --config=/root/kubeadm-init.yml
      when: inventory_hostname in groups['masters'] and kubectl_nodes.rc != 0 and not master_ha

    - name: Initialize Kubernetes cluster with kubeadm (HA master)
      command: kubeadm init --config=/root/kubeadm-init.yml --upload-certs
      register: kubeadm_init
      when: inventory_hostname == groups['masters'][0] and kubectl_nodes.rc != 0 and master_ha
      delegate_to: "{{ groups['masters'][0] }}"
      run_once: true

    - name: Create .kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: 0755
      when: inventory_hostname in groups['masters'] and kubectl_nodes.rc != 0

    - name: Copy admin kubeconfig to user's home directory
      become: true
      copy:
        src: "/etc/kubernetes/admin.conf"
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        mode: 0644
      delegate_to: "{{ groups['masters'][0] }}"
      when: inventory_hostname in groups['masters'] and kubectl_nodes.rc != 0

    - name: Generate kubeadm token on first master node
      shell: kubeadm token create
      register: kubeadm_token
      when: master_ha | bool and inventory_hostname == groups['masters'][0]

    - name: Get discovery token CA cert hash on first master node
      shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256
      register: discovery_token_ca_cert_hash
      when: master_ha | bool and inventory_hostname == groups['masters'][0]

    - name: Generate certificate key on first master node
      shell: kubeadm init phase upload-certs --upload-certs
      register: certificate_key_output
      when: master_ha | bool and inventory_hostname == groups['masters'][0]

    - name: Extract certificate key on first master node
      set_fact:
        certificate_key: "{{ certificate_key_output.stdout_lines[-1] }}"
      when: master_ha | bool and inventory_hostname == groups['masters'][0]

    - name: Extract discovery token CA cert hash value
      set_fact:
        discovery_token_ca_cert_hash_value: "{{ discovery_token_ca_cert_hash.stdout.split('=')[-1].strip() }}"
      when: master_ha | bool and inventory_hostname == groups['masters'][0]

    - name: Join the node to the Kubernetes cluster
      shell: |
        kubeadm join {{ kube_vip_address }}:{{ kube_vip_port }} --token {{ hostvars[groups['masters'][0]].kubeadm_token.stdout }} \
          --discovery-token-ca-cert-hash sha256:{{ hostvars[groups['masters'][0]].discovery_token_ca_cert_hash_value }} \
          --control-plane --certificate-key {{ hostvars[groups['masters'][0]].certificate_key }}
      register: join_output
      when: master_ha | bool and inventory_hostname in groups['masters'][1:3]

    - name: Display join command output
      debug:
        var: join_output.stdout
      when: master_ha | bool and inventory_hostname in groups['masters'][1:3]

    - name: Copy admin kubeconfig to user's home directory
      become: true
      copy:
        src: "/etc/kubernetes/admin.conf"
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        mode: 0644
      when: master_ha | bool and inventory_hostname in groups['masters'] and kubectl_nodes.rc != 0

    - name: Get kubeadm join command
      command: kubeadm token create --print-join-command
      register: join_command
      changed_when: False
      when: inventory_hostname in groups['masters'] 
      delegate_to: "{{ groups['masters'][0] }}"
      
    - name: Set join command as fact
      set_fact:
        join_cmd: "{{ join_command.stdout }}"
      when: inventory_hostname in groups['masters'] 
      delegate_to: "{{ groups['masters'][0] }}"
      run_once: true 


- name: Check if the node is already part of the cluster
  stat:
    path: /etc/kubernetes/kubelet.conf
  register: node_already_joined
  when: inventory_hostname in groups['workers']

- name: Join the Kubernetes worker nodes
  command: "{{ hostvars[groups['masters'][0]]['join_cmd'] }}"
  when: inventory_hostname in groups['workers'] and not node_already_joined.stat.exists
  ignore_errors: true

