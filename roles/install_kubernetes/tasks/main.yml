---
- name: Initialize the Kubernetes master
  block:
#    - name: Check if kube-apiserver is running
#      shell: docker ps | grep -v pause | grep kube-apiserver
#      register: kube_apiserver
#      ignore_errors: true
#      retries: 5
#      delay: 60
#      until: kube_apiserver.rc == 0
#      changed_when: False
#      ignore_errors: true
#
#    - name: Proceed with next tasks
#      debug:
#        msg: "kube-apiserver is running."
#      when: kube_apiserver.rc == 0
#      ignore_errors: true
#
#    - name: Proceed with next tasks
#      debug:
#        msg: "kube-apiserver is running."
#      when: kube_apiserver.rc == 0

    - name: Check if any Kubernetes nodes are already set up
      command: kubectl get nodes
      register: kubectl_nodes
      ignore_errors: true

    - name: Template kubeadm config file
      template:
        src: kubeadm-init.yaml.j2
        dest: /root/kubeadm-init.yml

    - name: Initialize Kubernetes cluster with kubeadm
      command: kubeadm init --config=/root/kubeadm-init.yml
      when: inventory_hostname in groups['masters'] and kubectl_nodes.rc != 0 

    - name: Create .kube directory
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: 0755
      when: inventory_hostname in groups['masters'] and kubectl_nodes.rc != 0

    - name: Copy admin kubeconfig to user's home directory
      become: true
      copy:
        src: "/etc/kubernetes/admin.conf"
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        mode: 0644
      when: inventory_hostname in groups['masters'] and kubectl_nodes.rc != 0

    - name: Change ownership of the kubeconfig
      become: true
      file:
        path: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_env.USER }}"
        group: "{{ ansible_env.USER }}"
        mode: 0644
      when: inventory_hostname in groups['masters'] and kubectl_nodes.rc != 0 

    - name: Get kubeadm join command
      command: kubeadm token create --print-join-command
      register: join_command
      changed_when: False
      when: inventory_hostname in groups['masters'] 

    - name: Set join command as fact
      set_fact:
        join_cmd: "{{ join_command.stdout }}"
      when: inventory_hostname in groups['masters'] 
      delegate_to: "{{ groups['masters'][0] }}"
      run_once: true 

- name: Check if the node is already part of the cluster
  stat:
    path: /etc/kubernetes/kubelet.conf
  register: node_already_joined
  when: inventory_hostname in groups['workers']

- name: Join the Kubernetes worker nodes
  command: "{{ hostvars[groups['masters'][0]]['join_cmd'] }}"
  when: inventory_hostname in groups['workers'] and not node_already_joined.stat.exists
  ignore_errors: true

