---
# =============================================================================
# KUBERNETES CLUSTER DEPLOYMENT PLAYBOOK
# =============================================================================
# This playbook deploys a complete Kubernetes cluster with additional services
# Optimized for Ubuntu/Debian and CentOS/RHEL systems
# 
# EXECUTION ORDER:
# 1. OS Validation      - Verify system compatibility
# 2. System Setup       - Base system configuration and packages  
# 3. Kubernetes Setup   - Cluster initialization and networking
# 4. Applications       - Deploy additional services and components
#
# USAGE:
#   ansible-playbook -i inventory.ini site.yml
#   ansible-playbook -i inventory.ini site.yml --tags "validation,system_setup"
#   ansible-playbook -i inventory.ini site.yml --skip-tags "applications"
# =============================================================================

# -----------------------------------------------------------------------------
# STAGE 1: OS VALIDATION AND COMPATIBILITY CHECK
# -----------------------------------------------------------------------------
# Validates that target systems meet requirements for Kubernetes deployment
# - Checks OS family compatibility (Ubuntu/Debian, CentOS/RHEL)
# - Verifies minimum system requirements (memory, architecture)
# - Ensures required services (systemd) and package managers are available
# - Sets OS-specific facts for use in subsequent roles
- hosts: all
  name: "OS Validation and Compatibility Check"
  roles:
    - validate_os_compatibility  # Comprehensive system validation
  tags: validation

# -----------------------------------------------------------------------------
# STAGE 2: SYSTEM PREPARATION AND CONFIGURATION  
# -----------------------------------------------------------------------------
# Configures base system settings required for Kubernetes
# - Configures package repositories for Kubernetes and Docker
# - Sets up basic system configuration (timezone, kernel modules, etc.)
# - Configures time synchronization with chrony
# - Sets up DNS resolution
# - Configures kernel parameters for container networking
# - Installs OS packages (Kubernetes, Docker, utilities)
# - Installs and configures Docker container runtime
- hosts: all
  name: "System Preparation and Configuration"
  roles:
    - configure_repo         # Set up package repositories (K8s, Docker)
    - common                 # Basic system setup (timezone, kernel, firewall)
    - configure_chrony       # Time synchronization configuration
    - configure_dns          # DNS resolution setup
    - configure_sysctl       # Kernel parameters for networking
    - install_os_package     # Install required OS packages 
    - install_docker         # Docker container runtime installation
  tags: system_setup

# -----------------------------------------------------------------------------
# STAGE 3: KUBERNETES CLUSTER INITIALIZATION
# -----------------------------------------------------------------------------
# Initializes Kubernetes cluster and sets up networking
# - Installs and configures DNS masquerading (dnsmasq) on install nodes
# - Initializes Kubernetes master node with kubeadm
# - Joins worker nodes to the cluster
# Note: Only runs on 'installs' group (typically master nodes)
- hosts: installs
  name: "Kubernetes Cluster and DNS Setup"
  roles:
    - install_dnsmasq        # DNS server for cluster (tags: dns)
    - install_kubernetes     # Cluster initialization and node joining
  tags: kubernetes_setup

# -----------------------------------------------------------------------------
# STAGE 4: KUBERNETES APPLICATIONS AND SERVICES
# -----------------------------------------------------------------------------
# Deploys additional Kubernetes services and applications
# All roles run on 'installs' group for centralized management
# Network and Infrastructure:
#   - Flannel: Pod networking (CNI)
#   - MetalLB: Load balancer for bare metal
#   - Istio: Service mesh
# Storage:
#   - Rook Ceph: Distributed storage system
#   - MinIO: Object storage
# Security and Management:
#   - Cert Manager: TLS certificate management
#   - Harbor: Container registry
# Monitoring and Logging:
#   - Prometheus: Metrics collection and monitoring
#   - EFK Stack: Elasticsearch, Fluentd, Kibana for logging
# Development and CI/CD:
#   - Argo: GitOps and workflow engine
#   - Knative: Serverless workloads
# Additional Services:
#   - PyPI Server: Python package repository
#   - Streaming services, Backend/Frontend applications
#   - GPU Operator: NVIDIA GPU support
- hosts: installs
  name: "Kubernetes Applications and Services Deployment"
  roles:
    # Network and Infrastructure
    - install_flannel        # Pod networking (CNI plugin)
    - install_tools          # Essential tools (k9s, kubectl, helm)
    - remove_master_taint    # Allow scheduling on master nodes (optional)
  tags: applications

# -----------------------------------------------------------------------------
# STAGE 5: POST-INSTALLATION TASKS
# -----------------------------------------------------------------------------
# Runs post-installation tasks only on master1 node
# - Display cluster status and information
# - Verify all pods are running correctly
# - Create completion markers
- hosts: masters[0]
  name: "Post-Installation: Cluster Status Check"
  roles:
    - post_cluster_status    # Display cluster status and information
  tags: post_status

- hosts: masters[0]
  name: "Post-Installation: CoreDNS Harbor Configuration"
  roles:
    - post_coredns_config    # Configure CoreDNS for Harbor domain resolution
  tags: post_coredns

- hosts: masters[0]
  name: "Post-Installation: Node Configuration"
  roles:
    - post_node_config       # Configure node labels and annotations
  tags: post_nodes

- hosts: masters[0]
  name: "Post-Installation: Certificate Extension"
  roles:
    - post_cert_extend       # Extend Kubernetes certificates to 10+ years
  tags: post_certs

- hosts: masters[0]
  name: "Post-Installation: Image Cleanup CronJob"
  roles:
    - post_image_cleanup     # Setup automated dangling image cleanup
  tags: post_cleanup

# -----------------------------------------------------------------------------
# MAINTENANCE AND CLEANUP (COMMENTED OUT)
# -----------------------------------------------------------------------------  
# Uncomment these roles when you need to remove cluster components
# WARNING: These operations are destructive and will remove data
#- hosts: all
#  name: "Cluster Component Removal"
#  roles:
#    - remove_ceph_cluster   # Remove Ceph storage cluster
#    - remove_helm_chart     # Remove Helm chart deployments
#  tags: cleanup


